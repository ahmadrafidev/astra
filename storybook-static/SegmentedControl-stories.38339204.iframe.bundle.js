"use strict";(self.webpackChunkastra_ui=self.webpackChunkastra_ui||[]).push([[1368],{"./stories/SegmentedControl.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomStyling:()=>CustomStyling,Default:()=>Default,MultipleSelection:()=>MultipleSelection,NoDefaultSelection:()=>NoDefaultSelection,__namedExportsOrder:()=>__namedExportsOrder,default:()=>SegmentedControl_stories});var jsx_runtime=__webpack_require__("./node_modules/.pnpm/next@14.2.5_@babel+core@7.24.9_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/.pnpm/next@14.2.5_@babel+core@7.24.9_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js");function cov_n3m8ir4td(){var path="/Users/ahmadrafidev/Developer/side-projects/web/astra/components/SegmentedControl/SegmentedControl.tsx",global=new Function("return this")(),gcv="__coverage__",coverageData={path:"/Users/ahmadrafidev/Developer/side-projects/web/astra/components/SegmentedControl/SegmentedControl.tsx",statementMap:{0:{start:{line:14,column:29},end:{line:51,column:1}},1:{start:{line:15,column:50},end:{line:17,column:6}},2:{start:{line:18,column:31},end:{line:42,column:5}},3:{start:{line:20,column:8},end:{line:33,column:9}},4:{start:{line:21,column:12},end:{line:28,column:13}},5:{start:{line:22,column:16},end:{line:22,column:78}},6:{start:{line:22,column:65},end:{line:22,column:76}},7:{start:{line:24,column:16},end:{line:27,column:18}},8:{start:{line:30,column:12},end:{line:32,column:14}},9:{start:{line:34,column:8},end:{line:34,column:47}},10:{start:{line:35,column:8},end:{line:41,column:9}},11:{start:{line:36,column:12},end:{line:40,column:13}},12:{start:{line:37,column:16},end:{line:37,column:74}},13:{start:{line:37,column:60},end:{line:37,column:71}},14:{start:{line:39,column:16},end:{line:39,column:65}},15:{start:{line:43,column:4},end:{line:50,column:7}},16:{start:{line:45,column:63},end:{line:49,column:21}},17:{start:{line:46,column:29},end:{line:46,column:54}},18:{start:{line:52,column:0},end:{line:52,column:50}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:14,column:29},end:{line:14,column:30}},loc:{start:{line:14,column:145},end:{line:51,column:1}},line:14},1:{name:"(anonymous_1)",decl:{start:{line:18,column:31},end:{line:18,column:32}},loc:{start:{line:18,column:40},end:{line:42,column:5}},line:18},2:{name:"(anonymous_2)",decl:{start:{line:22,column:60},end:{line:22,column:61}},loc:{start:{line:22,column:65},end:{line:22,column:76}},line:22},3:{name:"(anonymous_3)",decl:{start:{line:37,column:55},end:{line:37,column:56}},loc:{start:{line:37,column:60},end:{line:37,column:71}},line:37},4:{name:"(anonymous_4)",decl:{start:{line:45,column:31},end:{line:45,column:32}},loc:{start:{line:45,column:63},end:{line:49,column:21}},line:45},5:{name:"(anonymous_5)",decl:{start:{line:46,column:25},end:{line:46,column:26}},loc:{start:{line:46,column:29},end:{line:46,column:54}},line:46}},branchMap:{0:{loc:{start:{line:14,column:59},end:{line:14,column:75}},type:"default-arg",locations:[{start:{line:14,column:74},end:{line:14,column:75}}],line:14},1:{loc:{start:{line:14,column:77},end:{line:14,column:93}},type:"default-arg",locations:[{start:{line:14,column:88},end:{line:14,column:93}}],line:14},2:{loc:{start:{line:15,column:59},end:{line:17,column:5}},type:"cond-expr",locations:[{start:{line:15,column:89},end:{line:15,column:101}},{start:{line:15,column:104},end:{line:17,column:5}}],line:15},3:{loc:{start:{line:20,column:8},end:{line:33,column:9}},type:"if",locations:[{start:{line:20,column:8},end:{line:33,column:9}},{start:{line:29,column:15},end:{line:33,column:9}}],line:20},4:{loc:{start:{line:21,column:12},end:{line:28,column:13}},type:"if",locations:[{start:{line:21,column:12},end:{line:28,column:13}},{start:{line:23,column:19},end:{line:28,column:13}}],line:21},5:{loc:{start:{line:35,column:8},end:{line:41,column:9}},type:"if",locations:[{start:{line:35,column:8},end:{line:41,column:9}},{start:{line:void 0,column:void 0},end:{line:void 0,column:void 0}}],line:35},6:{loc:{start:{line:36,column:12},end:{line:40,column:13}},type:"if",locations:[{start:{line:36,column:12},end:{line:40,column:13}},{start:{line:38,column:19},end:{line:40,column:13}}],line:36},7:{loc:{start:{line:47,column:59},end:{line:47,column:128}},type:"cond-expr",locations:[{start:{line:47,column:93},end:{line:47,column:108}},{start:{line:47,column:111},end:{line:47,column:128}}],line:47}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0},f:{0:0,1:0,2:0,3:0,4:0,5:0},b:{0:[0],1:[0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0]},inputSourceMap:{version:3,sources:["/Users/ahmadrafidev/Developer/side-projects/web/astra/components/SegmentedControl/SegmentedControl.tsx"],sourcesContent:["import React, { useState } from 'react';\n\n/**\n * @typedef {Object} SegmentedControlProps\n * @property {string[]} segments - The array of segment labels to display in the control.\n * @property {(selectedSegments: string[] | string) => void} [onSegmentChange] - Callback function triggered when the selected segment(s) change.\n * @property {number | number[]} [defaultIndex=0] - The default selected index or indices.\n * @property {boolean} [multiple=false] - Whether multiple segments can be selected.\n * @property {string} [className] - Additional class names to apply to the segmented control container.\n * @property {string} [activeClassName='bg-blue-600 text-white'] - Class name for the active segment.\n * @property {string} [inactiveClassName='bg-gray-200 text-gray-600'] - Class name for the inactive segments.\n */\nexport interface SegmentedControlProps {\n  segments: string[];\n  onSegmentChange?: (selectedSegments: string[] | string) => void;\n  defaultIndex?: number | number[];\n  multiple?: boolean;\n  className?: string;\n  activeClassName: string;\n  inactiveClassName: string;\n}\n\n/**\n * Segmented Control component that allows users to select one or multiple options.\n * \n * @param {SegmentedControlProps} props - Props for the Segmented Control component.\n * @returns {JSX.Element} The rendered Segmented Control component.\n * @example\n * <SegmentedControl\n *   segments={['Option 1', 'Option 2', 'Option 3']}\n *   defaultIndex={0}\n *   onSegmentChange={(segment) => console.log(segment)}\n * />\n */\nconst SegmentedControl: React.FC<SegmentedControlProps> = ({\n  segments,\n  onSegmentChange,\n  defaultIndex = 0,\n  multiple = false,\n  className,\n  activeClassName,\n  inactiveClassName,\n}) => {\n  const [selectedIndices, setSelectedIndices] = useState<number[]>(\n    Array.isArray(defaultIndex) ? defaultIndex : [defaultIndex]\n  );\n\n  const handleSegmentClick = (index: number) => {\n    let newSelectedIndices: number[];\n\n    if (multiple) {\n      if (selectedIndices.includes(index)) {\n        newSelectedIndices = selectedIndices.filter((i) => i !== index);\n      } else {\n        newSelectedIndices = [...selectedIndices, index];\n      }\n    } else {\n      newSelectedIndices = [index];\n    }\n\n    setSelectedIndices(newSelectedIndices);\n\n    if (onSegmentChange) {\n      if (multiple) {\n        onSegmentChange(newSelectedIndices.map((i) => segments[i]));\n      } else {\n        onSegmentChange(segments[newSelectedIndices[0]]);\n      }\n    }\n  };\n\n  return (\n    <div className={`flex rounded-lg overflow-hidden ${className}`}>\n      {segments.map((segment, index) => (\n        <button\n          key={index}\n          onClick={() => handleSegmentClick(index)}\n          className={`px-4 py-2 focus:outline-none ${\n            selectedIndices.includes(index) ? activeClassName : inactiveClassName\n          }`}\n        >\n          {segment}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nSegmentedControl.displayName=\"SegmentedControl\"\nexport default SegmentedControl;\n"],names:["React","useState","SegmentedControl","segments","onSegmentChange","defaultIndex","multiple","className","activeClassName","inactiveClassName","selectedIndices","setSelectedIndices","Array","isArray","handleSegmentClick","index","newSelectedIndices","includes","filter","i","map","div","segment","button","onClick","displayName"],mappings:";AAAA,OAAOA,SAASC,QAAQ,QAAQ,QAAQ;AAsBxC;;;;;;;;;;;CAWC,GACD,MAAMC,mBAAoD,CAAC,EACzDC,QAAQ,EACRC,eAAe,EACfC,eAAe,CAAC,EAChBC,WAAW,KAAK,EAChBC,SAAS,EACTC,eAAe,EACfC,iBAAiB,EAClB;IACC,MAAM,CAACC,iBAAiBC,mBAAmB,GAAGV,SAC5CW,MAAMC,OAAO,CAACR,gBAAgBA,eAAe;QAACA;KAAa;IAG7D,MAAMS,qBAAqB,CAACC;QAC1B,IAAIC;QAEJ,IAAIV,UAAU;YACZ,IAAII,gBAAgBO,QAAQ,CAACF,QAAQ;gBACnCC,qBAAqBN,gBAAgBQ,MAAM,CAAC,CAACC,IAAMA,MAAMJ;YAC3D,OAAO;gBACLC,qBAAqB;uBAAIN;oBAAiBK;iBAAM;YAClD;QACF,OAAO;YACLC,qBAAqB;gBAACD;aAAM;QAC9B;QAEAJ,mBAAmBK;QAEnB,IAAIZ,iBAAiB;YACnB,IAAIE,UAAU;gBACZF,gBAAgBY,mBAAmBI,GAAG,CAAC,CAACD,IAAMhB,QAAQ,CAACgB,EAAE;YAC3D,OAAO;gBACLf,gBAAgBD,QAAQ,CAACa,kBAAkB,CAAC,EAAE,CAAC;YACjD;QACF;IACF;IAEA,qBACE,KAACK;QAAId,WAAW,CAAC,gCAAgC,EAAEA,UAAU,CAAC;kBAC3DJ,SAASiB,GAAG,CAAC,CAACE,SAASP,sBACtB,KAACQ;gBAECC,SAAS,IAAMV,mBAAmBC;gBAClCR,WAAW,CAAC,6BAA6B,EACvCG,gBAAgBO,QAAQ,CAACF,SAASP,kBAAkBC,kBACrD,CAAC;0BAEDa;eANIP;;AAWf;AAEAb,iBAAiBuB,WAAW,GAAC;AAC7B,eAAevB,iBAAiB"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"43e661de3be0f5a6df6e56fb1c6b16147fbb2613"},coverage=global[gcv]||(global[gcv]={});coverage[path]&&"43e661de3be0f5a6df6e56fb1c6b16147fbb2613"===coverage[path].hash||(coverage[path]=coverageData);var actualCoverage=coverage[path];return cov_n3m8ir4td=function(){return actualCoverage},actualCoverage}cov_n3m8ir4td(),cov_n3m8ir4td().s[0]++;const SegmentedControl=({segments,onSegmentChange,defaultIndex=(cov_n3m8ir4td().b[0][0]++,0),multiple=(cov_n3m8ir4td().b[1][0]++,!1),className,activeClassName,inactiveClassName})=>{cov_n3m8ir4td().f[0]++;const[selectedIndices,setSelectedIndices]=(cov_n3m8ir4td().s[1]++,(0,react.useState)(Array.isArray(defaultIndex)?(cov_n3m8ir4td().b[2][0]++,defaultIndex):(cov_n3m8ir4td().b[2][1]++,[defaultIndex])));cov_n3m8ir4td().s[2]++;return cov_n3m8ir4td().s[15]++,(0,jsx_runtime.jsx)("div",{className:`flex rounded-lg overflow-hidden ${className}`,children:segments.map(((segment,index)=>(cov_n3m8ir4td().f[4]++,cov_n3m8ir4td().s[16]++,(0,jsx_runtime.jsx)("button",{onClick:()=>(cov_n3m8ir4td().f[5]++,cov_n3m8ir4td().s[17]++,(index=>{let newSelectedIndices;cov_n3m8ir4td().f[1]++,cov_n3m8ir4td().s[3]++,multiple?(cov_n3m8ir4td().b[3][0]++,cov_n3m8ir4td().s[4]++,selectedIndices.includes(index)?(cov_n3m8ir4td().b[4][0]++,cov_n3m8ir4td().s[5]++,newSelectedIndices=selectedIndices.filter((i=>(cov_n3m8ir4td().f[2]++,cov_n3m8ir4td().s[6]++,i!==index)))):(cov_n3m8ir4td().b[4][1]++,cov_n3m8ir4td().s[7]++,newSelectedIndices=[...selectedIndices,index])):(cov_n3m8ir4td().b[3][1]++,cov_n3m8ir4td().s[8]++,newSelectedIndices=[index]),cov_n3m8ir4td().s[9]++,setSelectedIndices(newSelectedIndices),cov_n3m8ir4td().s[10]++,onSegmentChange?(cov_n3m8ir4td().b[5][0]++,cov_n3m8ir4td().s[11]++,multiple?(cov_n3m8ir4td().b[6][0]++,cov_n3m8ir4td().s[12]++,onSegmentChange(newSelectedIndices.map((i=>(cov_n3m8ir4td().f[3]++,cov_n3m8ir4td().s[13]++,segments[i]))))):(cov_n3m8ir4td().b[6][1]++,cov_n3m8ir4td().s[14]++,onSegmentChange(segments[newSelectedIndices[0]]))):cov_n3m8ir4td().b[5][1]++})(index)),className:`px-4 py-2 focus:outline-none ${selectedIndices.includes(index)?(cov_n3m8ir4td().b[7][0]++,activeClassName):(cov_n3m8ir4td().b[7][1]++,inactiveClassName)}`,children:segment},index))))})};cov_n3m8ir4td().s[18]++,SegmentedControl.displayName="SegmentedControl";const SegmentedControl_SegmentedControl=SegmentedControl;try{SegmentedControl.displayName="SegmentedControl",SegmentedControl.__docgenInfo={description:"Segmented Control component that allows users to select one or multiple options.",displayName:"SegmentedControl",props:{segments:{defaultValue:null,description:"",name:"segments",required:!0,type:{name:"string[]"}},onSegmentChange:{defaultValue:null,description:"",name:"onSegmentChange",required:!1,type:{name:"((selectedSegments: string | string[]) => void)"}},defaultIndex:{defaultValue:{value:"0"},description:"",name:"defaultIndex",required:!1,type:{name:"number | number[]"}},multiple:{defaultValue:{value:"false"},description:"",name:"multiple",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},activeClassName:{defaultValue:null,description:"",name:"activeClassName",required:!0,type:{name:"string"}},inactiveClassName:{defaultValue:null,description:"",name:"inactiveClassName",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["components/SegmentedControl/SegmentedControl.tsx#SegmentedControl"]={docgenInfo:SegmentedControl.__docgenInfo,name:"SegmentedControl",path:"components/SegmentedControl/SegmentedControl.tsx#SegmentedControl"})}catch(__react_docgen_typescript_loader_error){}const SegmentedControl_stories={title:"Components/SegmentedControl",component:SegmentedControl_SegmentedControl,argTypes:{segments:{control:{type:"object"},description:"The array of segment labels to display in the control.",table:{type:{summary:"string[]"}}},onSegmentChange:{action:"changed",description:"Callback function triggered when the selected segment(s) change.",table:{type:{summary:"(selectedSegments: string[] | string) => void"}}},defaultIndex:{control:{type:"number"},description:"The default selected index or indices.",table:{type:{summary:"number | number[]"},defaultValue:{summary:"0"}}},multiple:{control:"boolean",description:"Whether multiple segments can be selected.",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},className:{control:"text",description:"Additional class names to apply to the segmented control container.",table:{type:{summary:"string"}}},activeClassName:{control:"text",description:"Class name for the active segment.",table:{type:{summary:"string"},defaultValue:{summary:"bg-blue-600 text-white"}}},inactiveClassName:{control:"text",description:"Class name for the inactive segments.",table:{type:{summary:"string"},defaultValue:{summary:"bg-gray-200 text-gray-600"}}}},parameters:{docs:{description:{component:"The Segmented Control component allows users to select one or multiple options."}}}},Template=args=>(0,jsx_runtime.jsx)(SegmentedControl_SegmentedControl,{...args}),Default=Template.bind({});Default.args={segments:["Option 1","Option 2","Option 3"],defaultIndex:0,activeClassName:"bg-blue-600 text-white",inactiveClassName:"bg-gray-200 text-gray-600"};const MultipleSelection=Template.bind({});MultipleSelection.args={segments:["Segment 1","Segment 2","Segment 3","Segment 4"],defaultIndex:[0,2],multiple:!0,activeClassName:"bg-green-600 text-white",inactiveClassName:"bg-gray-200 text-gray-600"};const CustomStyling=Template.bind({});CustomStyling.args={segments:["Left","Center","Right"],defaultIndex:1,activeClassName:"bg-red-600 text-white",inactiveClassName:"bg-gray-300 text-gray-700",className:"border border-red-600 rounded-lg"};const NoDefaultSelection=Template.bind({});NoDefaultSelection.args={segments:["One","Two","Three"],defaultIndex:-1,activeClassName:"bg-purple-600 text-white",inactiveClassName:"bg-gray-200 text-gray-600"};const __namedExportsOrder=["Default","MultipleSelection","CustomStyling","NoDefaultSelection"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => <SegmentedControl {...args} />",...Default.parameters?.docs?.source}}},MultipleSelection.parameters={...MultipleSelection.parameters,docs:{...MultipleSelection.parameters?.docs,source:{originalSource:"args => <SegmentedControl {...args} />",...MultipleSelection.parameters?.docs?.source}}},CustomStyling.parameters={...CustomStyling.parameters,docs:{...CustomStyling.parameters?.docs,source:{originalSource:"args => <SegmentedControl {...args} />",...CustomStyling.parameters?.docs?.source}}},NoDefaultSelection.parameters={...NoDefaultSelection.parameters,docs:{...NoDefaultSelection.parameters?.docs,source:{originalSource:"args => <SegmentedControl {...args} />",...NoDefaultSelection.parameters?.docs?.source}}}}}]);