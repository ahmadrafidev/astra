"use strict";(self.webpackChunkastra_ui=self.webpackChunkastra_ui||[]).push([[4824],{"./stories/Badge.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomClassName:()=>CustomClassName,Default:()=>Default,LargeBadge:()=>LargeBadge,SmallBadge:()=>SmallBadge,WithCount:()=>WithCount,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Badge_stories});var jsx_runtime=__webpack_require__("./node_modules/.pnpm/next@14.2.5_@babel+core@7.24.9_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-runtime.js");__webpack_require__("./node_modules/.pnpm/next@14.2.5_@babel+core@7.24.9_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js");function cov_15zzapjvsh(){var path="/Users/ahmadrafidev/Developer/side-projects/web/astra/components/Badge/Badge.tsx",global=new Function("return this")(),gcv="__coverage__",coverage=global[gcv]||(global[gcv]={});coverage[path]&&"2baac32b37dd60a870b5923ee25fd83ce45d1511"===coverage[path].hash||(coverage[path]={path:"/Users/ahmadrafidev/Developer/side-projects/web/astra/components/Badge/Badge.tsx",statementMap:{0:{start:{line:9,column:18},end:{line:20,column:1}},1:{start:{line:10,column:24},end:{line:14,column:5}},2:{start:{line:15,column:4},end:{line:19,column:7}},3:{start:{line:21,column:0},end:{line:21,column:28}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:9,column:18},end:{line:9,column:19}},loc:{start:{line:9,column:208},end:{line:20,column:1}},line:9}},branchMap:{0:{loc:{start:{line:9,column:34},end:{line:9,column:47}},type:"default-arg",locations:[{start:{line:9,column:45},end:{line:9,column:47}}],line:9},1:{loc:{start:{line:9,column:49},end:{line:9,column:63}},type:"default-arg",locations:[{start:{line:9,column:61},end:{line:9,column:63}}],line:9},2:{loc:{start:{line:9,column:65},end:{line:9,column:86}},type:"default-arg",locations:[{start:{line:9,column:73},end:{line:9,column:86}}],line:9},3:{loc:{start:{line:9,column:88},end:{line:9,column:113}},type:"default-arg",locations:[{start:{line:9,column:100},end:{line:9,column:113}}],line:9},4:{loc:{start:{line:9,column:115},end:{line:9,column:142}},type:"default-arg",locations:[{start:{line:9,column:127},end:{line:9,column:142}}],line:9},5:{loc:{start:{line:9,column:144},end:{line:9,column:175}},type:"default-arg",locations:[{start:{line:9,column:160},end:{line:9,column:175}}],line:9},6:{loc:{start:{line:9,column:177},end:{line:9,column:192}},type:"default-arg",locations:[{start:{line:9,column:184},end:{line:9,column:192}}],line:9},7:{loc:{start:{line:18,column:18},end:{line:18,column:92}},type:"binary-expr",locations:[{start:{line:18,column:18},end:{line:18,column:22}},{start:{line:18,column:26},end:{line:18,column:45}},{start:{line:18,column:50},end:{line:18,column:91}}],line:18},8:{loc:{start:{line:18,column:50},end:{line:18,column:91}},type:"cond-expr",locations:[{start:{line:18,column:69},end:{line:18,column:83}},{start:{line:18,column:86},end:{line:18,column:91}}],line:18}},s:{0:0,1:0,2:0,3:0},f:{0:0},b:{0:[0],1:[0],2:[0],3:[0],4:[0],5:[0],6:[0],7:[0,0,0],8:[0,0]},inputSourceMap:{version:3,sources:["/Users/ahmadrafidev/Developer/side-projects/web/astra/components/Badge/Badge.tsx"],sourcesContent:["import React from 'react';\n\n/**\n * Props for the Badge component.\n * \n * @typedef {Object} BadgeProps\n * @property {string} [text] - The text to display inside the badge.\n * @property {number} [count] - The count to display inside the badge.\n * @property {number} [maxCount=99] - The maximum count to display before showing \"maxCount+\".\n * @property {string} [className] - Additional class names for custom styling.\n * @property {string} [color='bg-gray-200'] - Background color for the badge.\n * @property {string} [darkColor='bg-gray-700'] - Background color for the badge in dark mode.\n * @property {string} [textColor='text-gray-900'] - Text color for the badge.\n * @property {string} [darkTextColor='text-gray-100'] - Text color for the badge in dark mode.\n * @property {'small' | 'medium' | 'large'} [size='medium'] - Size of the badge.\n * @property {string} [ariaLabel] - Aria label for accessibility.\n */\nexport interface BadgeProps {\n  text?: string;\n  count?: number;\n  maxCount?: number;\n  className?: string;\n  color?: string;\n  darkColor?: string;\n  textColor?: string;\n  darkTextColor?: string;\n  size?: 'small' | 'medium' | 'large';\n  ariaLabel?: string;\n}\n\n/**\n * Badge component for displaying text or a count.\n * \n * @component\n * @param {BadgeProps} props - Props for the Badge component.\n * @returns {JSX.Element} The rendered Badge component.\n */\nconst Badge: React.FC<BadgeProps> = ({\n  text,\n  count,\n  maxCount = 99,\n  className = '',\n  color = 'bg-gray-200',\n  darkColor = 'bg-gray-700',\n  textColor = 'text-gray-900',\n  darkTextColor = 'text-gray-100',\n  size = 'medium',\n  ariaLabel\n}) => {\n\n  const sizeClasses = {\n    small: 'px-2 py-0.5 text-xs rounded-lg',\n    medium: 'px-3 py-1 text-sm rounded-lg',\n    large: 'px-4 py-1 text-base rounded-lg'\n  };\n\n  return (\n    <span \n      aria-label={ariaLabel} \n      className={`inline-block rounded-lg mb-2 ${color} dark:${darkColor} ${textColor} dark:${darkTextColor} ${sizeClasses[size]} ${className}`}\n    >\n      {text || (count !== undefined && (count > maxCount ? `${maxCount}+` : count))}\n    </span>\n  );\n};\n\nBadge.displayName = \"Badge\";\nexport default Badge;\n"],names:["React","Badge","text","count","maxCount","className","color","darkColor","textColor","darkTextColor","size","ariaLabel","sizeClasses","small","medium","large","span","aria-label","undefined","displayName"],mappings:";AAAA,OAAOA,WAAW,QAAQ;AA8B1B;;;;;;CAMC,GACD,MAAMC,QAA8B,CAAC,EACnCC,IAAI,EACJC,KAAK,EACLC,WAAW,EAAE,EACbC,YAAY,EAAE,EACdC,QAAQ,aAAa,EACrBC,YAAY,aAAa,EACzBC,YAAY,eAAe,EAC3BC,gBAAgB,eAAe,EAC/BC,OAAO,QAAQ,EACfC,SAAS,EACV;IAEC,MAAMC,cAAc;QAClBC,OAAO;QACPC,QAAQ;QACRC,OAAO;IACT;IAEA,qBACE,KAACC;QACCC,cAAYN;QACZN,WAAW,CAAC,6BAA6B,EAAEC,MAAM,MAAM,EAAEC,UAAU,CAAC,EAAEC,UAAU,MAAM,EAAEC,cAAc,CAAC,EAAEG,WAAW,CAACF,KAAK,CAAC,CAAC,EAAEL,UAAU,CAAC;kBAExIH,QAASC,UAAUe,aAAcf,CAAAA,QAAQC,WAAW,CAAC,EAAEA,SAAS,CAAC,CAAC,GAAGD,KAAI;;AAGhF;AAEAF,MAAMkB,WAAW,GAAG;AACpB,eAAelB,MAAM"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"2baac32b37dd60a870b5923ee25fd83ce45d1511"});var actualCoverage=coverage[path];return cov_15zzapjvsh=function(){return actualCoverage},actualCoverage}cov_15zzapjvsh(),cov_15zzapjvsh().s[0]++;const Badge=({text,count,maxCount=(cov_15zzapjvsh().b[0][0]++,99),className=(cov_15zzapjvsh().b[1][0]++,""),color=(cov_15zzapjvsh().b[2][0]++,"bg-gray-200"),darkColor=(cov_15zzapjvsh().b[3][0]++,"bg-gray-700"),textColor=(cov_15zzapjvsh().b[4][0]++,"text-gray-900"),darkTextColor=(cov_15zzapjvsh().b[5][0]++,"text-gray-100"),size=(cov_15zzapjvsh().b[6][0]++,"medium"),ariaLabel})=>{cov_15zzapjvsh().f[0]++;const sizeClasses=(cov_15zzapjvsh().s[1]++,{small:"px-2 py-0.5 text-xs rounded-lg",medium:"px-3 py-1 text-sm rounded-lg",large:"px-4 py-1 text-base rounded-lg"});return cov_15zzapjvsh().s[2]++,(0,jsx_runtime.jsx)("span",{"aria-label":ariaLabel,className:`inline-block rounded-lg mb-2 ${color} dark:${darkColor} ${textColor} dark:${darkTextColor} ${sizeClasses[size]} ${className}`,children:(cov_15zzapjvsh().b[7][0]++,text||(cov_15zzapjvsh().b[7][1]++,void 0!==count&&(cov_15zzapjvsh().b[7][2]++,count>maxCount?(cov_15zzapjvsh().b[8][0]++,`${maxCount}+`):(cov_15zzapjvsh().b[8][1]++,count))))})};cov_15zzapjvsh().s[3]++,Badge.displayName="Badge";const Badge_Badge=Badge;try{Badge.displayName="Badge",Badge.__docgenInfo={description:"Badge component for displaying text or a count.",displayName:"Badge",props:{text:{defaultValue:null,description:"",name:"text",required:!1,type:{name:"string"}},count:{defaultValue:null,description:"",name:"count",required:!1,type:{name:"number"}},maxCount:{defaultValue:{value:"99"},description:"",name:"maxCount",required:!1,type:{name:"number"}},className:{defaultValue:{value:""},description:"",name:"className",required:!1,type:{name:"string"}},color:{defaultValue:{value:"bg-gray-200"},description:"",name:"color",required:!1,type:{name:"string"}},darkColor:{defaultValue:{value:"bg-gray-700"},description:"",name:"darkColor",required:!1,type:{name:"string"}},textColor:{defaultValue:{value:"text-gray-900"},description:"",name:"textColor",required:!1,type:{name:"string"}},darkTextColor:{defaultValue:{value:"text-gray-100"},description:"",name:"darkTextColor",required:!1,type:{name:"string"}},size:{defaultValue:{value:"medium"},description:"",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},ariaLabel:{defaultValue:null,description:"",name:"ariaLabel",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["components/Badge/Badge.tsx#Badge"]={docgenInfo:Badge.__docgenInfo,name:"Badge",path:"components/Badge/Badge.tsx#Badge"})}catch(__react_docgen_typescript_loader_error){}const Badge_stories={title:"Components/Badge",component:Badge_Badge,argTypes:{text:{control:"text",description:"The text to display inside the badge.",table:{type:{summary:"string"}}},count:{control:"number",description:"The count to display inside the badge.",table:{type:{summary:"number"}}},maxCount:{control:{type:"number",min:1},description:'The maximum count to display before showing "maxCount+".',table:{type:{summary:"number"},defaultValue:{summary:"99"}}},className:{control:"text",description:"Additional class names for custom styling.",table:{type:{summary:"string"}}},color:{control:"color",description:"Background color for the badge.",table:{type:{summary:"string"},defaultValue:{summary:"bg-gray-200"}}},darkColor:{control:"color",description:"Background color for the badge in dark mode.",table:{type:{summary:"string"},defaultValue:{summary:"bg-gray-700"}}},textColor:{control:"color",description:"Text color for the badge.",table:{type:{summary:"string"},defaultValue:{summary:"text-gray-900"}}},darkTextColor:{control:"color",description:"Text color for the badge in dark mode.",table:{type:{summary:"string"},defaultValue:{summary:"text-gray-100"}}},size:{control:{type:"select",options:["small","medium","large"]},description:"Size of the badge.",table:{type:{summary:"'small' | 'medium' | 'large'"},defaultValue:{summary:"medium"}}},ariaLabel:{control:"text",description:"Aria label for accessibility.",table:{type:{summary:"string"}}}},parameters:{docs:{description:{component:"The Badge component is used to display a small piece of information such as text or a count. It supports various sizes, colors, and dark mode styling."}}}},Template=args=>(0,jsx_runtime.jsx)(Badge_Badge,{...args}),Default=Template.bind({});Default.args={text:"New",size:"medium",color:"bg-gray-200",textColor:"text-gray-900",darkColor:"bg-gray-700",darkTextColor:"text-gray-100"};const WithCount=Template.bind({});WithCount.args={count:120,maxCount:99,size:"medium",color:"bg-red-500",textColor:"text-white",darkColor:"bg-red-700",darkTextColor:"text-white"};const SmallBadge=Template.bind({});SmallBadge.args={text:"Small",size:"small",color:"bg-blue-200",textColor:"text-blue-900",darkColor:"bg-blue-700",darkTextColor:"text-blue-100"};const LargeBadge=Template.bind({});LargeBadge.args={text:"Large",size:"large",color:"bg-green-200",textColor:"text-green-900",darkColor:"bg-green-700",darkTextColor:"text-green-100"};const CustomClassName=Template.bind({});CustomClassName.args={text:"Custom Badge",size:"medium",className:"border border-blue-500",color:"bg-white",textColor:"text-blue-500",darkColor:"bg-gray-800",darkTextColor:"text-blue-300"};const __namedExportsOrder=["Default","WithCount","SmallBadge","LargeBadge","CustomClassName"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => <Badge {...args} />",...Default.parameters?.docs?.source}}},WithCount.parameters={...WithCount.parameters,docs:{...WithCount.parameters?.docs,source:{originalSource:"args => <Badge {...args} />",...WithCount.parameters?.docs?.source}}},SmallBadge.parameters={...SmallBadge.parameters,docs:{...SmallBadge.parameters?.docs,source:{originalSource:"args => <Badge {...args} />",...SmallBadge.parameters?.docs?.source}}},LargeBadge.parameters={...LargeBadge.parameters,docs:{...LargeBadge.parameters?.docs,source:{originalSource:"args => <Badge {...args} />",...LargeBadge.parameters?.docs?.source}}},CustomClassName.parameters={...CustomClassName.parameters,docs:{...CustomClassName.parameters?.docs,source:{originalSource:"args => <Badge {...args} />",...CustomClassName.parameters?.docs?.source}}}}}]);