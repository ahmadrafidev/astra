"use strict";(self.webpackChunkastra_ui=self.webpackChunkastra_ui||[]).push([[5151],{"./stories/SkeletonLoader.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CircleShape:()=>CircleShape,DarkVariant:()=>DarkVariant,Default:()=>Default,MultipleLoaders:()=>MultipleLoaders,WaveAnimation:()=>WaveAnimation,__namedExportsOrder:()=>__namedExportsOrder,default:()=>SkeletonLoader_stories});var jsx_runtime=__webpack_require__("./node_modules/.pnpm/next@14.2.5_@babel+core@7.24.9_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-runtime.js");__webpack_require__("./node_modules/.pnpm/next@14.2.5_@babel+core@7.24.9_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js");function cov_26qc65wwv5(){var path="/Users/ahmadrafidev/Developer/side-projects/web/astra/components/SkeletonLoader/SkeletonLoader.tsx",global=new Function("return this")(),gcv="__coverage__",coverageData={path:"/Users/ahmadrafidev/Developer/side-projects/web/astra/components/SkeletonLoader/SkeletonLoader.tsx",statementMap:{0:{start:{line:9,column:27},end:{line:48,column:1}},1:{start:{line:10,column:24},end:{line:10,column:67}},2:{start:{line:11,column:29},end:{line:15,column:5}},3:{start:{line:16,column:25},end:{line:20,column:5}},4:{start:{line:21,column:27},end:{line:24,column:5}},5:{start:{line:25,column:26},end:{line:28,column:5}},6:{start:{line:29,column:27},end:{line:34,column:15}},7:{start:{line:29,column:48},end:{line:34,column:15}},8:{start:{line:35,column:4},end:{line:37,column:5}},9:{start:{line:36,column:8},end:{line:36,column:33}},10:{start:{line:38,column:4},end:{line:47,column:7}},11:{start:{line:46,column:23},end:{line:46,column:44}},12:{start:{line:49,column:0},end:{line:49,column:46}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:9,column:27},end:{line:9,column:28}},loc:{start:{line:9,column:170},end:{line:48,column:1}},line:9},1:{name:"(anonymous_1)",decl:{start:{line:29,column:27},end:{line:29,column:28}},loc:{start:{line:29,column:48},end:{line:34,column:15}},line:29},2:{name:"(anonymous_2)",decl:{start:{line:46,column:11},end:{line:46,column:12}},loc:{start:{line:46,column:23},end:{line:46,column:44}},line:46}},branchMap:{0:{loc:{start:{line:9,column:30},end:{line:9,column:44}},type:"default-arg",locations:[{start:{line:9,column:38},end:{line:9,column:44}}],line:9},1:{loc:{start:{line:9,column:46},end:{line:9,column:61}},type:"default-arg",locations:[{start:{line:9,column:55},end:{line:9,column:61}}],line:9},2:{loc:{start:{line:9,column:63},end:{line:9,column:77}},type:"default-arg",locations:[{start:{line:9,column:75},end:{line:9,column:77}}],line:9},3:{loc:{start:{line:9,column:79},end:{line:9,column:98}},type:"default-arg",locations:[{start:{line:9,column:87},end:{line:9,column:98}}],line:9},4:{loc:{start:{line:9,column:100},end:{line:9,column:119}},type:"default-arg",locations:[{start:{line:9,column:112},end:{line:9,column:119}}],line:9},5:{loc:{start:{line:9,column:121},end:{line:9,column:130}},type:"default-arg",locations:[{start:{line:9,column:129},end:{line:9,column:130}}],line:9},6:{loc:{start:{line:9,column:132},end:{line:9,column:146}},type:"default-arg",locations:[{start:{line:9,column:138},end:{line:9,column:146}}],line:9},7:{loc:{start:{line:9,column:148},end:{line:9,column:165}},type:"default-arg",locations:[{start:{line:9,column:158},end:{line:9,column:165}}],line:9},8:{loc:{start:{line:26,column:15},end:{line:26,column:63}},type:"cond-expr",locations:[{start:{line:26,column:43},end:{line:26,column:55}},{start:{line:26,column:58},end:{line:26,column:63}}],line:26},9:{loc:{start:{line:27,column:16},end:{line:27,column:67}},type:"cond-expr",locations:[{start:{line:27,column:45},end:{line:27,column:58}},{start:{line:27,column:61},end:{line:27,column:67}}],line:27},10:{loc:{start:{line:35,column:4},end:{line:37,column:5}},type:"if",locations:[{start:{line:35,column:4},end:{line:37,column:5}},{start:{line:void 0,column:void 0},end:{line:void 0,column:void 0}}],line:35}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0},f:{0:0,1:0,2:0},b:{0:[0],1:[0],2:[0],3:[0],4:[0],5:[0],6:[0],7:[0],8:[0,0],9:[0,0],10:[0,0]},inputSourceMap:{version:3,sources:["/Users/ahmadrafidev/Developer/side-projects/web/astra/components/SkeletonLoader/SkeletonLoader.tsx"],sourcesContent:["import React from 'react';\n\n/**\n * Props for the SkeletonLoader component.\n * \n * @typedef {Object} SkeletonLoaderProps\n * @property {string | number} [width='100%'] - The width of the skeleton loader.\n * @property {string | number} [height='1rem'] - The height of the skeleton loader.\n * @property {string} [className] - Additional class names for custom styling.\n * @property {'rectangle' | 'circle' | 'text'} [shape='rectangle'] - The shape of the skeleton loader.\n * @property {'pulse' | 'wave' | 'none'} [animation='pulse'] - The animation style of the skeleton loader.\n * @property {number} [count=1] - The number of skeleton loaders to display.\n * @property {string | number} [gap='0.5rem'] - The gap between multiple skeleton loaders.\n * @property {'light' | 'dark'} [variant='light'] - The color variant of the skeleton loader.\n */\nexport interface SkeletonLoaderProps {\n  width?: string | number;\n  height?: string | number;\n  className?: string;\n  shape?: 'rectangle' | 'circle' | 'text';\n  animation?: 'pulse' | 'wave' | 'none';\n  count?: number;\n  gap?: string | number;\n  variant?: 'light' | 'dark';\n}\n\n/**\n * SkeletonLoader component for displaying a loading skeleton placeholder.\n * \n * @component\n * @param {SkeletonLoaderProps} props - Props for the SkeletonLoader component.\n * @returns {JSX.Element} The rendered SkeletonLoader component.\n */\nconst SkeletonLoader: React.FC<SkeletonLoaderProps> = ({\n  width = '100%',\n  height = '1rem',\n  className = '',\n  shape = 'rectangle',\n  animation = 'pulse',\n  count = 1,\n  gap = '0.5rem',\n  variant = 'light',\n}) => {\n\n  const baseClasses = `bg-gray-300 dark:bg-gray-700 ${className}`;\n\n  const animationClasses = {\n    pulse: 'animate-pulse',\n    wave: 'animate-wave',\n    none: '',\n  };\n\n  const shapeClasses = {\n    rectangle: 'rounded',\n    circle: 'rounded-full',\n    text: 'rounded-md',\n  };\n\n  const variantClasses = {\n    light: 'bg-gray-300 dark:bg-gray-700',\n    dark: 'bg-gray-700 dark:bg-gray-300',\n  };\n\n  const skeletonStyle: React.CSSProperties = {\n    width: typeof width === 'number' ? `${width}px` : width,\n    height: typeof height === 'number' ? `${height}px` : height,\n  };\n\n  const renderSkeleton = (key: number) => (\n    <div\n      key={key}\n      className={`${baseClasses} ${animationClasses[animation]} ${shapeClasses[shape]} ${variantClasses[variant]}`}\n      style={skeletonStyle}\n      role=\"status\"\n      aria-label={`Loading item ${key + 1} of ${count}`}\n    />\n  );\n\n  if (count === 1) {\n    return renderSkeleton(0);\n  }\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', gap }}>\n      {Array.from({ length: count }, (_, index) => renderSkeleton(index))}\n    </div>\n  );\n};\n\nSkeletonLoader.displayName = \"SkeletonLoader\";\nexport default SkeletonLoader;\n"],names:["React","SkeletonLoader","width","height","className","shape","animation","count","gap","variant","baseClasses","animationClasses","pulse","wave","none","shapeClasses","rectangle","circle","text","variantClasses","light","dark","skeletonStyle","renderSkeleton","key","div","style","role","aria-label","display","flexDirection","Array","from","length","_","index","displayName"],mappings:";AAAA,OAAOA,WAAW,QAAQ;AA0B1B;;;;;;CAMC,GACD,MAAMC,iBAAgD,CAAC,EACrDC,QAAQ,MAAM,EACdC,SAAS,MAAM,EACfC,YAAY,EAAE,EACdC,QAAQ,WAAW,EACnBC,YAAY,OAAO,EACnBC,QAAQ,CAAC,EACTC,MAAM,QAAQ,EACdC,UAAU,OAAO,EAClB;IAEC,MAAMC,cAAc,CAAC,6BAA6B,EAAEN,UAAU,CAAC;IAE/D,MAAMO,mBAAmB;QACvBC,OAAO;QACPC,MAAM;QACNC,MAAM;IACR;IAEA,MAAMC,eAAe;QACnBC,WAAW;QACXC,QAAQ;QACRC,MAAM;IACR;IAEA,MAAMC,iBAAiB;QACrBC,OAAO;QACPC,MAAM;IACR;IAEA,MAAMC,gBAAqC;QACzCpB,OAAO,OAAOA,UAAU,WAAW,CAAC,EAAEA,MAAM,EAAE,CAAC,GAAGA;QAClDC,QAAQ,OAAOA,WAAW,WAAW,CAAC,EAAEA,OAAO,EAAE,CAAC,GAAGA;IACvD;IAEA,MAAMoB,iBAAiB,CAACC,oBACtB,KAACC;YAECrB,WAAW,CAAC,EAAEM,YAAY,CAAC,EAAEC,gBAAgB,CAACL,UAAU,CAAC,CAAC,EAAES,YAAY,CAACV,MAAM,CAAC,CAAC,EAAEc,cAAc,CAACV,QAAQ,CAAC,CAAC;YAC5GiB,OAAOJ;YACPK,MAAK;YACLC,cAAY,CAAC,aAAa,EAAEJ,MAAM,EAAE,IAAI,EAAEjB,MAAM,CAAC;WAJ5CiB;IAQT,IAAIjB,UAAU,GAAG;QACf,OAAOgB,eAAe;IACxB;IAEA,qBACE,KAACE;QAAIC,OAAO;YAAEG,SAAS;YAAQC,eAAe;YAAUtB;QAAI;kBACzDuB,MAAMC,IAAI,CAAC;YAAEC,QAAQ1B;QAAM,GAAG,CAAC2B,GAAGC,QAAUZ,eAAeY;;AAGlE;AAEAlC,eAAemC,WAAW,GAAG;AAC7B,eAAenC,eAAe"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"4743b84a007a7dd62de07542ece283f1a15fa5d8"},coverage=global[gcv]||(global[gcv]={});coverage[path]&&"4743b84a007a7dd62de07542ece283f1a15fa5d8"===coverage[path].hash||(coverage[path]=coverageData);var actualCoverage=coverage[path];return cov_26qc65wwv5=function(){return actualCoverage},actualCoverage}cov_26qc65wwv5(),cov_26qc65wwv5().s[0]++;const SkeletonLoader=({width=(cov_26qc65wwv5().b[0][0]++,"100%"),height=(cov_26qc65wwv5().b[1][0]++,"1rem"),className=(cov_26qc65wwv5().b[2][0]++,""),shape=(cov_26qc65wwv5().b[3][0]++,"rectangle"),animation=(cov_26qc65wwv5().b[4][0]++,"pulse"),count=(cov_26qc65wwv5().b[5][0]++,1),gap=(cov_26qc65wwv5().b[6][0]++,"0.5rem"),variant=(cov_26qc65wwv5().b[7][0]++,"light")})=>{cov_26qc65wwv5().f[0]++;const baseClasses=(cov_26qc65wwv5().s[1]++,`bg-gray-300 dark:bg-gray-700 ${className}`),animationClasses=(cov_26qc65wwv5().s[2]++,{pulse:"animate-pulse",wave:"animate-wave",none:""}),shapeClasses=(cov_26qc65wwv5().s[3]++,{rectangle:"rounded",circle:"rounded-full",text:"rounded-md"}),variantClasses=(cov_26qc65wwv5().s[4]++,{light:"bg-gray-300 dark:bg-gray-700",dark:"bg-gray-700 dark:bg-gray-300"}),skeletonStyle=(cov_26qc65wwv5().s[5]++,{width:"number"==typeof width?(cov_26qc65wwv5().b[8][0]++,`${width}px`):(cov_26qc65wwv5().b[8][1]++,width),height:"number"==typeof height?(cov_26qc65wwv5().b[9][0]++,`${height}px`):(cov_26qc65wwv5().b[9][1]++,height)});cov_26qc65wwv5().s[6]++;const renderSkeleton=key=>(cov_26qc65wwv5().f[1]++,cov_26qc65wwv5().s[7]++,(0,jsx_runtime.jsx)("div",{className:`${baseClasses} ${animationClasses[animation]} ${shapeClasses[shape]} ${variantClasses[variant]}`,style:skeletonStyle,role:"status","aria-label":`Loading item ${key+1} of ${count}`},key));return cov_26qc65wwv5().s[8]++,1===count?(cov_26qc65wwv5().b[10][0]++,cov_26qc65wwv5().s[9]++,renderSkeleton(0)):(cov_26qc65wwv5().b[10][1]++,cov_26qc65wwv5().s[10]++,(0,jsx_runtime.jsx)("div",{style:{display:"flex",flexDirection:"column",gap},children:Array.from({length:count},((_,index)=>(cov_26qc65wwv5().f[2]++,cov_26qc65wwv5().s[11]++,renderSkeleton(index))))}))};cov_26qc65wwv5().s[12]++,SkeletonLoader.displayName="SkeletonLoader";const SkeletonLoader_SkeletonLoader=SkeletonLoader;try{SkeletonLoader.displayName="SkeletonLoader",SkeletonLoader.__docgenInfo={description:"SkeletonLoader component for displaying a loading skeleton placeholder.",displayName:"SkeletonLoader",props:{width:{defaultValue:{value:"100%"},description:"",name:"width",required:!1,type:{name:"string | number"}},height:{defaultValue:{value:"1rem"},description:"",name:"height",required:!1,type:{name:"string | number"}},className:{defaultValue:{value:""},description:"",name:"className",required:!1,type:{name:"string"}},shape:{defaultValue:{value:"rectangle"},description:"",name:"shape",required:!1,type:{name:"enum",value:[{value:'"text"'},{value:'"rectangle"'},{value:'"circle"'}]}},animation:{defaultValue:{value:"pulse"},description:"",name:"animation",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"pulse"'},{value:'"wave"'}]}},count:{defaultValue:{value:"1"},description:"",name:"count",required:!1,type:{name:"number"}},gap:{defaultValue:{value:"0.5rem"},description:"",name:"gap",required:!1,type:{name:"string | number"}},variant:{defaultValue:{value:"light"},description:"",name:"variant",required:!1,type:{name:"enum",value:[{value:'"light"'},{value:'"dark"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["components/SkeletonLoader/SkeletonLoader.tsx#SkeletonLoader"]={docgenInfo:SkeletonLoader.__docgenInfo,name:"SkeletonLoader",path:"components/SkeletonLoader/SkeletonLoader.tsx#SkeletonLoader"})}catch(__react_docgen_typescript_loader_error){}const SkeletonLoader_stories={title:"Components/SkeletonLoader",component:SkeletonLoader_SkeletonLoader,argTypes:{width:{control:"text",description:"The width of the skeleton loader.",table:{type:{summary:"string | number"},defaultValue:{summary:"'100%'"}}},height:{control:"text",description:"The height of the skeleton loader.",table:{type:{summary:"string | number"},defaultValue:{summary:"'1rem'"}}},className:{control:"text",description:"Additional class names for custom styling.",table:{type:{summary:"string"}}},shape:{control:{type:"select",options:["rectangle","circle","text"]},description:"The shape of the skeleton loader.",table:{type:{summary:"'rectangle' | 'circle' | 'text'"},defaultValue:{summary:"'rectangle'"}}},animation:{control:{type:"select",options:["pulse","wave","none"]},description:"The animation style of the skeleton loader.",table:{type:{summary:"'pulse' | 'wave' | 'none'"},defaultValue:{summary:"'pulse'"}}},count:{control:{type:"number",min:1},description:"The number of skeleton loaders to display.",table:{type:{summary:"number"},defaultValue:{summary:"1"}}},gap:{control:"text",description:"The gap between multiple skeleton loaders.",table:{type:{summary:"string | number"},defaultValue:{summary:"'0.5rem'"}}},variant:{control:{type:"select",options:["light","dark"]},description:"The color variant of the skeleton loader.",table:{type:{summary:"'light' | 'dark'"},defaultValue:{summary:"'light'"}}}}},Template=args=>(0,jsx_runtime.jsx)(SkeletonLoader_SkeletonLoader,{...args}),Default=Template.bind({});Default.args={width:"100%",height:"1rem",shape:"rectangle",animation:"pulse",count:1,gap:"0.5rem",variant:"light"};const CircleShape=Template.bind({});CircleShape.args={width:"2rem",height:"2rem",shape:"circle",animation:"pulse",count:1,variant:"light"};const MultipleLoaders=Template.bind({});MultipleLoaders.args={width:"100%",height:"1rem",shape:"rectangle",animation:"pulse",count:3,gap:"1rem",variant:"light"};const WaveAnimation=Template.bind({});WaveAnimation.args={width:"100%",height:"1rem",shape:"rectangle",animation:"wave",count:1,variant:"light"};const DarkVariant=Template.bind({});DarkVariant.args={width:"100%",height:"1rem",shape:"rectangle",animation:"pulse",count:1,variant:"dark"};const __namedExportsOrder=["Default","CircleShape","MultipleLoaders","WaveAnimation","DarkVariant"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => <SkeletonLoader {...args} />",...Default.parameters?.docs?.source}}},CircleShape.parameters={...CircleShape.parameters,docs:{...CircleShape.parameters?.docs,source:{originalSource:"args => <SkeletonLoader {...args} />",...CircleShape.parameters?.docs?.source}}},MultipleLoaders.parameters={...MultipleLoaders.parameters,docs:{...MultipleLoaders.parameters?.docs,source:{originalSource:"args => <SkeletonLoader {...args} />",...MultipleLoaders.parameters?.docs?.source}}},WaveAnimation.parameters={...WaveAnimation.parameters,docs:{...WaveAnimation.parameters?.docs,source:{originalSource:"args => <SkeletonLoader {...args} />",...WaveAnimation.parameters?.docs?.source}}},DarkVariant.parameters={...DarkVariant.parameters,docs:{...DarkVariant.parameters?.docs,source:{originalSource:"args => <SkeletonLoader {...args} />",...DarkVariant.parameters?.docs?.source}}}}}]);